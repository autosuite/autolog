"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var core = __importStar(require("@actions/core"));
var exec = __importStar(require("@actions/exec"));
/*
 * -------------------------------------------------------------------------------------------------------------------
 * - Constants. ------------------------------------------------------------------------------------------------------
 * -------------------------------------------------------------------------------------------------------------------
 */
/**
 * The regular expression that represents a version release.
 *
 * For example, `v0.11.5-beta+17-2020-05-12` will provide parts:
 *
 * - `0`: `0`
 * - `1`: `11`
 * - `2`: `5`
 * - `3`: `-beta+17-2020-05-12`
 */
exports.SEMVER_REGEXP = /v?(\d)\.(\d)\.(\d)(.*)/;
/*
 * -------------------------------------------------------------------------------------------------------------------
 * - Classes. --------------------------------------------------------------------------------------------------------
 * -------------------------------------------------------------------------------------------------------------------
 */
/** A [RegExp] to [string] replacement map for use on a file. */
var ReplacementMap = /** @class */ (function () {
    function ReplacementMap(matcher, replacement) {
        this.matcher = matcher;
        this.replacement = replacement;
    }
    return ReplacementMap;
}());
exports.ReplacementMap = ReplacementMap;
;
/** A basic concrete representation of a Semantic Version. */
var SemVer = /** @class */ (function () {
    function SemVer(major, minor, patch, info) {
        this.major = major;
        this.minor = minor;
        this.patch = patch;
        this.info = info;
    }
    /**
     * From a textual version, create a [SemVer].
     *
     * These might be something like `0.31.5` or `2.0.0-some_info_here+2020-03-01`, for example.
     *
     * @param text the textual version
     */
    SemVer.constructFromText = function (text) {
        var match = text.match(exports.SEMVER_REGEXP);
        if (!match) {
            throw Error("Provided text is not valid SemVer: [" + text + "]");
        }
        var major = parseInt(match[0]);
        var minor = parseInt(match[1]);
        var patch = parseInt(match[2]);
        /* Force set to null if falsey (empty string). */
        var info = match[3] || null;
        return new SemVer(major, minor, patch, info);
    };
    /**
     * Return the "zero version" as a [SemVer].
     */
    SemVer.constructZero = function () {
        return new SemVer(0, 0, 0, null);
    };
    /**
     * Return "true" if this is a "zero version".
     */
    SemVer.prototype.isZero = function () {
        return (this.major === 0 && this.minor === 0 && this.patch === 0 && this.info == null);
    };
    SemVer.prototype.toString = function () {
        return this.major + "." + this.minor + "." + this.patch + this.info;
    };
    return SemVer;
}());
exports.SemVer = SemVer;
;
/*
 * -------------------------------------------------------------------------------------------------------------------
 * - Utilities. ------------------------------------------------------------------------------------------------------
 * -------------------------------------------------------------------------------------------------------------------
 */
/**
 * Given a file, perform replacements based on the [ReplacementMap] and write.
 *
 * @param filename the file's name
 * @param replacements the [Array] of [ReplacementMap]s
 */
function rewriteFileContentsWithReplacements(filename, replacements) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            fs_1.default.exists(filename, function (exists) {
                if (exists) {
                    /* If the file exists, we can perform the replacement by reading from the file first: */
                    fs_1.default.readFile(filename, function (_, data) {
                        var replaced = data.toString();
                        replacements.forEach(function (replaceMap) {
                            replaced = replaced.replace(replaceMap.matcher, replaceMap.replacement);
                        });
                        fs_1.default.writeFile(filename, replaced, function (_) { return null; });
                    });
                }
                else {
                    /* If the file does not exist, we produce a warning and stop. */
                    core.warning("Cannot perform replace-rewrite of file that does not exist: " + filename + ".");
                }
            });
            return [2 /*return*/];
        });
    });
}
exports.rewriteFileContentsWithReplacements = rewriteFileContentsWithReplacements;
/**
 * Given a file, perform a single replacement based on the matcher and replacement.
 *
 * @param filename the file's name
 * @param matcher the matcher [RegExp]
 * @param replacement the replacement [string]
 */
function rewriteFileContentsWithReplacement(filename, matcher, replacement) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rewriteFileContentsWithReplacements(filename, [new ReplacementMap(matcher, replacement)])];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.rewriteFileContentsWithReplacement = rewriteFileContentsWithReplacement;
/**
 * Given [string] of newline-delimited tags, find the latest SemVer tag and return it.
 *
 * We need to iterate all anyway to ignore all the useless values, so let's not define a comparator.
 *
 * Note the example: `1.0.0-rc2 < 1.0.0`.
 *
 * @param tags the tags from which to find the latest SemVer version
 * @param stableOnly if the function should ignore all prerelease/build info-appended versions
 * @returns a SemVer representation as a 4-ary [Tuple] of 3 [number]s and 1 optional [string]
 */
function findLatestSemVerUsingString(tags, stableOnly) {
    return __awaiter(this, void 0, void 0, function () {
        var largestSeen;
        var _this = this;
        return __generator(this, function (_a) {
            largestSeen = new SemVer(0, 0, 0, null);
            tags.split("\n").forEach(function (tag) { return __awaiter(_this, void 0, void 0, function () {
                var candidate, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            core.info("Found tag: [" + tag + "].");
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            candidate = SemVer.constructFromText(tag);
                            /* Skip if not stable and stableOnly is true. */
                            if (stableOnly && candidate.info) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, compareSemVer(largestSeen, candidate)];
                        case 2:
                            largestSeen = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = _b.sent();
                            return [2 /*return*/];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
            return [2 /*return*/, largestSeen];
        });
    });
}
exports.findLatestSemVerUsingString = findLatestSemVerUsingString;
/**
 * Determine the largest seen Semantic Version.
 *
 * TODO: Look up ways to make SemVer generically comparable.
 *
 * @param largestSeen the largest seen (so far) version
 * @param current the current version to compare
 */
function compareSemVer(largestSeen, current) {
    return __awaiter(this, void 0, void 0, function () {
        var majorIsSame, majorIsNewer, minorIsSame, minorIsNewer, patchIsSame, patchIsNewer, infoExisted, infoLexicallyGreater, patchVersionIncrement, stableVersionIncrement;
        return __generator(this, function (_a) {
            majorIsSame = current.major == largestSeen.major;
            majorIsNewer = current.major > largestSeen.major;
            minorIsSame = current.minor == largestSeen.minor;
            minorIsNewer = current.minor > largestSeen.minor;
            patchIsSame = current.patch == largestSeen.patch;
            patchIsNewer = current.patch > largestSeen.patch;
            infoExisted = largestSeen.info != null;
            infoLexicallyGreater = (current.info != null && largestSeen.info != null && current.info.localeCompare(largestSeen.info) == 1);
            if (majorIsNewer) {
                /* A bigger major number is found. */
                return [2 /*return*/, current];
            }
            else if (majorIsSame) {
                patchVersionIncrement = minorIsSame && patchIsNewer;
                stableVersionIncrement = minorIsSame && patchIsSame && !current.info && infoExisted;
                if (minorIsNewer || patchVersionIncrement || stableVersionIncrement || infoLexicallyGreater) {
                    return [2 /*return*/, current];
                }
            }
            return [2 /*return*/, largestSeen];
        });
    });
}
exports.compareSemVer = compareSemVer;
/**
 * Using `git` tags, find the latest version (if this is possible).
 *
 * If no version is found, just return 0.0.0 with no info associated.
 *
 * @param stableOnly whether we should only extract stable versions
 */
function findLatestVersionFromGitTags(stableOnly) {
    return __awaiter(this, void 0, void 0, function () {
        var text, _a;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    text = null;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, exec.exec('git fetch --tags')];
                case 2:
                    _b.sent();
                    return [4 /*yield*/, exec.exec('git tag', [], {
                            listeners: {
                                stdout: function (data) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, findLatestSemVerUsingString(data.toString(), stableOnly)];
                                            case 1:
                                                text = _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }
                            }
                        })];
                case 3:
                    _b.sent();
                    return [3 /*break*/, 5];
                case 4:
                    _a = _b.sent();
                    core.warning("Complaint git tag cannot be found. Returning 0.0.0.");
                    return [3 /*break*/, 5];
                case 5:
                    if (!text) {
                        return [2 /*return*/, SemVer.constructZero()];
                    }
                    return [2 /*return*/, text];
            }
        });
    });
}
exports.findLatestVersionFromGitTags = findLatestVersionFromGitTags;
