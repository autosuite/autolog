"use strict";
/**
 * This file tests the methods for the exportable [[SemVer]] type.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var index_1 = require("../index");
describe("SemVer.constructFromText (nominal)", function () {
    var parameters = [
        /* SemVers with some extremes, some zeroes, and no info strings. */
        {
            "text": "0.1.5",
            "expectedMajor": 0,
            "expectedMinor": 1,
            "expectedPatch": 5,
            "expectedInfo": null,
        },
        {
            "text": "912418.0.12419",
            "expectedMajor": 912418,
            "expectedMinor": 0,
            "expectedPatch": 12419,
            "expectedInfo": null,
        },
        {
            "text": "00.00124.0124",
            "expectedMajor": 0,
            "expectedMinor": 124,
            "expectedPatch": 124,
            "expectedInfo": null,
        },
        {
            "text": "3.31.12412",
            "expectedMajor": 3,
            "expectedMinor": 31,
            "expectedPatch": 12412,
            "expectedInfo": null,
        },
        {
            "text": "0.0.0",
            "expectedMajor": 0,
            "expectedMinor": 0,
            "expectedPatch": 0,
            "expectedInfo": null,
        },
        /* SemVers with info strings. */
        {
            "text": "0.10.5-rc2",
            "expectedMajor": 0,
            "expectedMinor": 10,
            "expectedPatch": 5,
            "expectedInfo": "-rc2"
        },
        {
            "text": "123.456.789-rc2+build2",
            "expectedMajor": 123,
            "expectedMinor": 456,
            "expectedPatch": 789,
            "expectedInfo": "-rc2+build2",
        },
        {
            "text": "124124.1110.512-rc5+2020-06-25",
            "expectedMajor": 124124,
            "expectedMinor": 1110,
            "expectedPatch": 512,
            "expectedInfo": "-rc5+2020-06-25",
        },
        {
            "text": "0001.10.22-invalid but supported",
            "expectedMajor": 1,
            "expectedMinor": 10,
            "expectedPatch": 22,
            "expectedInfo": "-invalid but supported",
        },
        {
            "text": "0432.1098.5124-14uua(*!@Y*&",
            "expectedMajor": 432,
            "expectedMinor": 1098,
            "expectedPatch": 5124,
            "expectedInfo": "-14uua(*!@Y*&",
        },
    ];
    parameters.forEach(function (group) { return it("...parses correctly when the input is: \"" + group.text + "\"", function () {
        var version = index_1.SemVer.constructFromText(group.text);
        chai_1.expect([version.major, version.minor, version.patch, version.info]).to.eql([
            group.expectedMajor, group.expectedMinor, group.expectedPatch, group.expectedInfo,
        ]);
    }); });
});
describe("findLatestSemVerUsingString (nominal)", function () {
    var parameters = [
        /* A normal case in logical ascending order where everything is v-prefixed and there are only single digits. */
        {
            "lines": [
                "v0.1.0", "v0.2.0", "v0.2.1", "v0.2.2", "v0.2.3", "v0.2.4", "v0.2.5", "v1.0.0", "v1.0.1",
            ],
            "stable": true,
            "expectedMajor": 1,
            "expectedMinor": 0,
            "expectedPatch": 1,
            "expectedInfo": null,
        },
        /* A bit more of a complicated case where there's order but some versions are skipped with double digits. */
        {
            "lines": [
                "v0.3.0", "v0.10.0", "v0.11.5", "v0.11.27", "v1.2.3", "v3.2.1", "v3.3.333", "v3.4.0", "v3.4.1",
            ],
            "stable": true,
            "expectedMajor": 3,
            "expectedMinor": 4,
            "expectedPatch": 1,
            "expectedInfo": null,
        },
        /* Chaotic ordering where some (but not all) of the cases have info strings and some aren't v-prefixed. */
        {
            "lines": [
                "v3.12.3", "11.0.77-i11", "v0.10.1-rc2", "1.234.20-info3", "v0.0.0-initial", "0.2.4", "v0.2.5",
            ],
            "stable": true,
            "expectedMajor": 3,
            "expectedMinor": 12,
            "expectedPatch": 3,
            "expectedInfo": null,
        },
        /* Introducing cases that are completely invalid and some duplicate cases. */
        {
            "lines": [
                "v1.9.12-alpha", "v0.02.0005", "invalid version", "0.00.000-test", "5.0.022-rc12+build5", "0.11.2",
            ],
            "stable": true,
            "expectedMajor": 0,
            "expectedMinor": 11,
            "expectedPatch": 2,
            "expectedInfo": null,
        },
        /* Now allowing info string cases in the maximum calculation (lexicographical order). */
        {
            "lines": [
                "81.2.abc-test", "v2.07.00001-info", "1.1.1", "v0.0.0-init", "5.007.06-rc3", "invalid", "005.6.7-blah",
            ],
            "stable": false,
            "expectedMajor": 5,
            "expectedMinor": 7,
            "expectedPatch": 6,
            "expectedInfo": "-rc3",
        },
        /* Checking to make sure precedence exists between info versions and stable and whitespace is fine. */
        {
            "lines": [
                "\r0.5.1\n", "0.5.10-unstable\n  ", "\t1.0.1-rc51\n", "  \n\n 1.0.1", "\ninvalid ", " 0.2.1-blah \r\n ",
            ],
            "stable": false,
            "expectedMajor": 1,
            "expectedMinor": 0,
            "expectedPatch": 1,
            "expectedInfo": null,
        },
    ];
    parameters.forEach(function (group) { return it("...finds the latest " + (group.stable ? "stable ver." : "ver.") + " correctly from (trimmed): " +
        ("[" + group.lines.map(function (line) { return "\"" + line.trim() + "\""; }).join(", ") + "]"), function () { return __awaiter(void 0, void 0, void 0, function () {
        var version;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, index_1.findLatestSemVerUsingString(group.lines.join("\n"), group.stable)];
                case 1:
                    version = _a.sent();
                    chai_1.expect([version.major, version.minor, version.patch, version.info]).to.eql([
                        group.expectedMajor, group.expectedMinor, group.expectedPatch, group.expectedInfo,
                    ]);
                    return [2 /*return*/];
            }
        });
    }); }); });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtdmVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvX190ZXN0X18vc2VtdmVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVILDZCQUE4QjtBQUU5QixrQ0FBK0Q7QUFHL0QsUUFBUSxDQUFDLG9DQUFvQyxFQUFFO0lBQzNDLElBQU0sVUFBVSxHQU1WO1FBQ0UsbUVBQW1FO1FBRW5FO1lBQ0ksTUFBTSxFQUFFLE9BQU87WUFDZixlQUFlLEVBQUUsQ0FBQztZQUNsQixlQUFlLEVBQUUsQ0FBQztZQUNsQixlQUFlLEVBQUUsQ0FBQztZQUNsQixjQUFjLEVBQUUsSUFBSTtTQUN2QjtRQUNEO1lBQ0ksTUFBTSxFQUFFLGdCQUFnQjtZQUN4QixlQUFlLEVBQUUsTUFBTTtZQUN2QixlQUFlLEVBQUUsQ0FBQztZQUNsQixlQUFlLEVBQUUsS0FBSztZQUN0QixjQUFjLEVBQUUsSUFBSTtTQUN2QjtRQUNEO1lBQ0ksTUFBTSxFQUFFLGVBQWU7WUFDdkIsZUFBZSxFQUFFLENBQUM7WUFDbEIsZUFBZSxFQUFFLEdBQUc7WUFDcEIsZUFBZSxFQUFFLEdBQUc7WUFDcEIsY0FBYyxFQUFFLElBQUk7U0FDdkI7UUFDRDtZQUNJLE1BQU0sRUFBRSxZQUFZO1lBQ3BCLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLGVBQWUsRUFBRSxFQUFFO1lBQ25CLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLGNBQWMsRUFBRSxJQUFJO1NBQ3ZCO1FBQ0Q7WUFDSSxNQUFNLEVBQUUsT0FBTztZQUNmLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLGVBQWUsRUFBRSxDQUFDO1lBQ2xCLGNBQWMsRUFBRSxJQUFJO1NBQ3ZCO1FBRUQsZ0NBQWdDO1FBRWhDO1lBQ0ksTUFBTSxFQUFFLFlBQVk7WUFDcEIsZUFBZSxFQUFFLENBQUM7WUFDbEIs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