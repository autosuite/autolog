"use strict";
/**
 * This file tests the methods for the exportable [[SemVer]] type.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var globals_1 = require("@jest/globals");
var jest_each_1 = __importDefault(require("jest-each"));
var index_1 = require("../index");
globals_1.describe("SemVer.constructFromText (nominal)", function () {
    jest_each_1.default([
        /* SemVers with some extremes, some zeroes, and no info strings. */
        ["0.10.5", 0, 10, 5, null],
        ["912418.0.12419", 1, 3, 10, null],
        ["00.00124.0124", 1, 3, 10, null],
        ["3.31.12412", 1, 3, 10, null],
        ["0.0.124192412", 1, 3, 10, null],
        ["0.0.0", 1, 3, 10, null],
        /* SemVers with info strings. */
        ["0.10.5-rc2", 0, 10, 5, "rc2"],
        ["123.456.789-rc2+build2", 123, 456, 789, "rc2+build2"],
        ["124124.1110.512-rc5+2020-06-25", 124124, 1110, 512, "rc5+2020-06-25"],
        ["0001.10.22-invalid but supported", 1, 10, 22, "invalid but supported"],
        ["0432.1098.5124-124uliuawnliu1248asd8(*!@Y*&", 432, 1098, 5124, "124uliuawnliu1248asd8(*!@Y*&"],
    ]).it("when the input is '%s'", function (text, expectedMajor, expectedMinor, expectedPatch, expectedInfo) {
        var version = index_1.SemVer.constructFromText(text);
        globals_1.expect(version.major).toBe(expectedMajor);
        globals_1.expect(version.minor).toBe(expectedMinor);
        globals_1.expect(version.patch).toBe(expectedPatch);
        globals_1.expect(version.info).toBe(expectedInfo);
    });
});
// test('constructing SemVer from text without info string is consistent', () => {
//     SemVer.constructFromText("")
//     expect(sum(1, 2)).toBe(3);
// });
// test('constructing SemVer from text with an info string is consistent', () => {
//     expect(sum(1, 2)).toBe(3);
// });
// test('constructing SemVer with all zeros is consistent', () => {
//     expect(sum(1, 2)).toBe(3);
// });
// test('representing a SemVer without info is consistent', () => {
//     expect(sum(1, 2)).toBe(3);
// });
// test('representing a SemVer with info is consistent', () => {
//     expect(sum(1, 2)).toBe(3);
// });
